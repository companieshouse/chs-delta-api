// Code generated by MockGen. DO NOT EDIT.
// Source: kafkaService.go

// Package mock_services is a generated GoMock package.
package mocks

import (
	config "github.com/companieshouse/chs-delta-api/config"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKafkaService is a mock of KafkaService interface
type MockKafkaService struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaServiceMockRecorder
}

// MockKafkaServiceMockRecorder is the mock recorder for MockKafkaService
type MockKafkaServiceMockRecorder struct {
	mock *MockKafkaService
}

// NewMockKafkaService creates a new mock instance
func NewMockKafkaService(ctrl *gomock.Controller) *MockKafkaService {
	mock := &MockKafkaService{ctrl: ctrl}
	mock.recorder = &MockKafkaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaService) EXPECT() *MockKafkaServiceMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockKafkaService) Init(cfg *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockKafkaServiceMockRecorder) Init(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockKafkaService)(nil).Init), cfg)
}

// SendMessage mocks base method
func (m *MockKafkaService) SendMessage(topic, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", topic, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockKafkaServiceMockRecorder) SendMessage(topic, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockKafkaService)(nil).SendMessage), topic, data)
}
