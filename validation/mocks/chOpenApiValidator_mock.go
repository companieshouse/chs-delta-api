// Code generated by MockGen. DO NOT EDIT.
// Source: chOpenApiValidator.go

// Package mock_validation is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCHValidator is a mock of CHValidator interface.
type MockCHValidator struct {
	ctrl     *gomock.Controller
	recorder *MockCHValidatorMockRecorder
}

// MockCHValidatorMockRecorder is the mock recorder for MockCHValidator.
type MockCHValidatorMockRecorder struct {
	mock *MockCHValidator
}

// NewMockCHValidator creates a new mock instance.
func NewMockCHValidator(ctrl *gomock.Controller) *MockCHValidator {
	mock := &MockCHValidator{ctrl: ctrl}
	mock.recorder = &MockCHValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCHValidator) EXPECT() *MockCHValidatorMockRecorder {
	return m.recorder
}

// GetSchema mocks base method.
func (m *MockCHValidator) GetSchema(ctx context.Context, openApiSpec, contextId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", ctx, openApiSpec, contextId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockCHValidatorMockRecorder) GetSchema(ctx, openApiSpec, contextId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockCHValidator)(nil).GetSchema), ctx, openApiSpec, contextId)
}

// ValidateRequestAgainstOpenApiSpec mocks base method.
func (m *MockCHValidator) ValidateRequestAgainstOpenApiSpec(httpReq *http.Request, openApiSpec, contextId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRequestAgainstOpenApiSpec", httpReq, openApiSpec, contextId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRequestAgainstOpenApiSpec indicates an expected call of ValidateRequestAgainstOpenApiSpec.
func (mr *MockCHValidatorMockRecorder) ValidateRequestAgainstOpenApiSpec(httpReq, openApiSpec, contextId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRequestAgainstOpenApiSpec", reflect.TypeOf((*MockCHValidator)(nil).ValidateRequestAgainstOpenApiSpec), httpReq, openApiSpec, contextId)
}
